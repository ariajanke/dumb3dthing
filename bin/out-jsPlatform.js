const jsPlatform=(()=>{"use strict";const A=()=>{},F=Symbol(),M=(()=>{let t={};const m=r=>(r&r-1)==0,l=(r,i)=>(e,b)=>{if(t[r].texture){if(b)throw"Cache Safety: textureLoader's cache was no invalided";return t[r].texture}const R=e.createTexture();e.bindTexture(e.TEXTURE_2D,R);const p=0,a=e.RGBA,d=1,c=1,y=0,_=e.RGBA,h=e.UNSIGNED_BYTE,o=new Uint8Array([0,0,255,255]);return e.texImage2D(e.TEXTURE_2D,p,a,d,c,y,_,h,o),e.bindTexture(e.TEXTURE_2D,R),e.texImage2D(e.TEXTURE_2D,p,a,_,h,i),m(i.width)&&m(i.height)?e.generateMipmap(e.TEXTURE_2D):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR)),t[r].texture=R};return Object.freeze({invalidateTextureCache:()=>{Object.keys(t).forEach(r=>{delete t[r].texture,t[r].texture=void 0})},loadImage:(r,i)=>{t[r]&&i(l(r,t[r].image));const e=new Image;e.onload=()=>{t[r]={image:e},i(l(r,e))},e.src=r}})})(),U=()=>{let t,m,l,E,r;const i=e=>{l=m(t,e),E=t[`TEXTURE${r}`]};return Object.freeze({setContext:e=>{t=e,l=void 0,!!m&&i()},height:()=>{throw"idk what to do"},width:()=>{throw"idk what to do"},load:e=>M.loadImage(e,b=>{console.log(`Loading image for ${e} complete.`),m=b}),bind:e=>{if(!l){if(!m){console.log("Cannot bind texture yet! Skipping!");return}console.log("Refreshing texture on bind call."),i()}t.activeTexture(E),t.bindTexture(t.TEXTURE_2D,l),e(r)},getNativeTexture:()=>l,setUnit:e=>A(r=e),getUnit:()=>r,destroy:()=>{}})},w=()=>{let t,m,l,E,r,i;const e=(a,d)=>{const c=t.createBuffer();return t.bindBuffer(a,c),t.bufferData(a,d,t.STATIC_DRAW),c},b=(a,d,c)=>{t.bindBuffer(t.ARRAY_BUFFER,a),t.vertexAttribPointer(d,c,t.FLOAT,!1,0,0),t.enableVertexAttribArray(d)},R=(a,d,c)=>(i=p(a,d,c))(),p=(a,d,c)=>(r=c.length,()=>{m=e(t.ELEMENT_ARRAY_BUFFER,c),l=e(t.ARRAY_BUFFER,a),E=e(t.ARRAY_BUFFER,d)});return Object.freeze({setContext:a=>{t=a,i&&i()},load:R,loadFromJsArrays:(a,d,c)=>R(new Float32Array(a),new Float32Array(d),new Uint16Array(c)),render:(a,d)=>{b(l,a,3),b(E,d,2),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,m),t.drawElements(t.TRIANGLES,r,t.UNSIGNED_SHORT,0)},destroy:()=>{}})};return(()=>{let t=()=>{throw"jsPlatform.bindTexture: must setTextureUnitHandler before use."},m=()=>{throw"jsPlatform.renderRenderModel: must setRenderModelAttributesNeeder before use."},l=()=>{throw""};const E=o=>{let f=0,s={},n;return[x=>{const u=x??f++;if(s[u])throw`indexMap.create: key "${u}" already in use.`;return s[u]=o(),s[u].setContext(n),u},x=>{s[x].destroy(),delete s[x]},x=>{const u=s[x];if(!u)throw"Did you forget to initialize this resource with the create function?";return u},x=>{Object.keys(s).forEach(u=>s[u].setContext(x)),n=x}]},r=(()=>{const o=[0,1,0],f=[1,0,0],s=[0,0,1];let n,x=()=>{throw"modelMatrix.apply: applier must be set before use."},u=()=>{throw"modelMatrix.setContext: applier factor not set."};return Object.freeze({setContext:T=>A(x=u(T)),rotateY:T=>mat4.rotate(n,n,T,o),rotateX:T=>mat4.rotate(n,n,T,f),rotateZ:T=>mat4.rotate(n,n,T,s),translate:T=>mat4.translate(n,n,T),reset:()=>A(n=mat4.create()),apply:()=>x(n),setApplierFactory:T=>A(u=T)})})(),i=(()=>{let o=mat4.create(),f,s=()=>{throw"viewMatrix.apply: applier must be set before use."};return Object.freeze({setContext:n=>A(s=f(n)),lookAt:(n,x,u)=>mat4.lookAt(o,n,x,u),apply:()=>s(o),setApplierFactory:n=>A(f=n)})})(),[e,b,R,p]=E(U),[a,d,c,y]=E(w),_=[y,p,i.setContext,r.setContext];let h=()=>{throw""};return Object.freeze({setContext:o=>{M.invalidateTextureCache(),_.forEach(f=>f(o)),m=l(o),t=h(o)},createTexture:e,destroyTexture:b,getTexture:R,createRenderModel:a,destroyRenderModel:d,getRenderModel:c,renderRenderModel:o=>m(c(o).render),bindTexture:o=>R(o).bind(t),modelMatrix:r,viewMatrix:i,setTextureUnitHandlerFactory:o=>A(h=o),setRenderModelAttributesNeederFactory:o=>A(l=o),promiseFileContents:(o,f)=>{fetch(o).then(s=>s.text()).then(s=>{const n=Module.cwrap("to_js_prepare_content_buffer","number",["number","number"])(f,s.length);Module.HEAPU8.set(new TextEncoder().encode(s),n),Module.cwrap("to_js_mark_fulfilled","null",["number"])(f)}).catch(console.log)}})})()})();
